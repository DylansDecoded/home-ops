---
# yaml-language-server: $schema=https://taskfile.dev/schema.json
version: "3"

vars:
  TALHELPER_CLUSTER_DIR: "{{.KUBERNETES_DIR}}/bootstrap/talos/clusterconfig"
  TALHELPER_SECRET_FILE: "{{.KUBERNETES_DIR}}/bootstrap/talos/talsecret.sops.yaml"
  TALHELPER_CONFIG_FILE: "{{.KUBERNETES_DIR}}/bootstrap/talos/talconfig.yaml"
  HELMFILE_FILE: "{{.KUBERNETES_DIR}}/bootstrap/helmfile.yaml"
  TALOSCONFIG_FILE: "{{.TALHELPER_CLUSTER_DIR}}/talosconfig"

env:
  TALOSCONFIG: "{{.TALOSCONFIG_FILE}}"

tasks:

  bootstrap:
    desc: Bootstrap the Talos cluster
    dir: "{{.KUBERNETES_DIR}}/bootstrap/talos"
    cmds:
      # - |
      #   if [ ! -f "{{.TALHELPER_SECRET_FILE}}" ]; then
      #       talhelper gensecret > {{.TALHELPER_SECRET_FILE}}
      #       sops --encrypt --in-place {{.TALHELPER_SECRET_FILE}}
      #   fi
      # - talhelper genconfig --config-file {{.TALHELPER_CONFIG_FILE}} --secret-file {{.TALHELPER_SECRET_FILE}} --out-dir {{.TALHELPER_CLUSTER_DIR}}
      - talhelper gencommand apply --config-file {{.TALHELPER_CONFIG_FILE}} --out-dir {{.TALHELPER_CLUSTER_DIR}} --extra-flags="--insecure" | bash
      - until talhelper gencommand bootstrap --config-file {{.TALHELPER_CONFIG_FILE}} --out-dir {{.TALHELPER_CLUSTER_DIR}} | bash; do sleep 10; done
      - task: fetch-kubeconfig
      - task: install-helm-apps
      - talosctl health --server=false
    preconditions:
      - msg: Missing talhelper config file
        sh: test -f {{.TALHELPER_CONFIG_FILE}}
      - msg: Missing Sops config file
        sh: test -f {{.SOPS_CONFIG_FILE}}
      - msg: Missing Sops Age key file
        sh: test -f {{.AGE_FILE}}

  fetch-kubeconfig:
    desc: Fetch kubeconfig
    dir: "{{.KUBERNETES_DIR}}/bootstrap/talos"
    cmd: until talhelper gencommand kubeconfig --config-file {{.TALHELPER_CONFIG_FILE}} --out-dir {{.TALHELPER_CLUSTER_DIR}} --extra-flags="{{.ROOT_DIR}} --force" | bash; do sleep 10; done
    preconditions:
      - msg: Missing talhelper config file
        sh: test -f {{.TALHELPER_CONFIG_FILE}}

  install-helm-apps:
    desc: Bootstrap core apps needed for Talos
    dir: "{{.KUBERNETES_DIR}}/bootstrap/talos"
    cmds:
      - until kubectl --kubeconfig {{.KUBECONFIG_FILE}} wait --for=condition=Ready=False nodes --all --timeout=600s; do sleep 10; done
      - helmfile --kubeconfig {{.KUBECONFIG_FILE}} --file {{.HELMFILE_FILE}} apply --skip-diff-on-install --suppress-diff
      - until kubectl --kubeconfig {{.KUBECONFIG_FILE}} wait --for=condition=Ready nodes --all --timeout=600s; do sleep 10; done
    preconditions:
      - msg: Missing kubeconfig
        sh: test -f {{.KUBECONFIG_FILE}}
      - msg: Missing helmfile
        sh: test -f {{.HELMFILE_FILE}}

  upgrade:
    desc: Upgrade Talos on a node
    dir: "{{.KUBERNETES_DIR}}/bootstrap/talos"
    cmds:
      - talosctl --nodes {{.node}} upgrade --image {{.image}} --wait=true --timeout=10m --preserve=true --reboot-mode={{.mode}}
      - talosctl --nodes {{.node}} health --wait-timeout=10m --server=false
    vars:
      mode: '{{.mode | default "default"}}'
    requires:
      vars: ["node", "image"]
    preconditions:
      - msg: Missing talosconfig
        sh: test -f {{.TALOSCONFIG_FILE}}
      - msg: Unable to retrieve Talos config
        sh: talosctl config info >/dev/null 2>&1
      - msg: Node not found
        sh: talosctl --nodes {{.node}} get machineconfig >/dev/null 2>&1

  upgrade-k8s:
    desc: Upgrade Kubernetes across the cluster
    dir: "{{.KUBERNETES_DIR}}/bootstrap/talos"
    cmd: talosctl --nodes {{.controller}} upgrade-k8s --to {{.to}}
    requires:
      vars: ["controller", "to"]
    preconditions:
      - msg: Missing talosconfig
        sh: test -f {{.TALOSCONFIG_FILE}}
      - msg: Unable to retrieve Talos config
        sh: talosctl config info >/dev/null 2>&1
      - msg: Node not found
        sh: talosctl --nodes {{.controller}} get machineconfig >/dev/null 2>&1

  nuke:
    desc: Resets nodes back to maintenance mode
    dir: "{{.KUBERNETES_DIR}}/bootstrap/talos"
    prompt: This will destroy your cluster and reset the nodes back to maintenance mode... continue?
    cmd: talhelper gencommand reset --config-file {{.TALHELPER_CONFIG_FILE}} --out-dir {{.TALHELPER_CLUSTER_DIR}} --extra-flags="--reboot {{- if eq .CLI_FORCE false }} --system-labels-to-wipe STATE --system-labels-to-wipe EPHEMERAL{{ end }} --graceful=false --wait=false" | bash

# ---
# # yaml-language-server: $schema=https://taskfile.dev/schema.json
# version: "3"

# x-vars: &vars
#   TALOS_VERSION:
#     sh: yq 'select(document_index == 1).spec.postBuild.substitute.TALOS_VERSION' {{.KUBERNETES_DIR}}/{{.cluster}}/apps/system-upgrade/system-upgrade-controller/ks.yaml
#   TALOS_SCHEMATIC_ID:
#     sh: yq 'select(document_index == 1).spec.postBuild.substitute.TALOS_SCHEMATIC_ID' {{.KUBERNETES_DIR}}/{{.cluster}}/apps/system-upgrade/system-upgrade-controller/ks.yaml
#   KUBERNETES_VERSION:
#     sh: yq 'select(document_index == 1).spec.postBuild.substitute.KUBERNETES_VERSION' {{.KUBERNETES_DIR}}/{{.cluster}}/apps/system-upgrade/system-upgrade-controller/ks.yaml
#   CONTROLLER:
#     sh: talosctl --context {{.cluster}} config info --output json | jq --raw-output '.endpoints[]' | shuf -n 1

# vars:
#   # Ref: https://github.com/onedr0p/home-service
#   HOME_SERVICE_ADDR: voyager.internal
#   HOME_SERVICE_USER: devin
#   HOME_SERVICE_MATCHBOX_DIR: /var/opt/home-service/apps/matchbox/data/config

# tasks:

#   apply-config:
#     desc: Apply Talos configuration to a node
#     cmd: |
#       sops --decrypt {{.KUBERNETES_DIR}}/{{.cluster}}/bootstrap/talos/assets/{{.hostname}}.secret.sops.yaml | \
#           $GOPATH/bin/envsubst | \
#               talosctl --context {{.cluster}} apply-config --mode={{.mode}} --nodes {{.hostname}} --file /dev/stdin
#     env: *vars
#     vars:
#       mode: '{{.mode | default "no-reboot"}}'
#     requires:
#       vars: ["cluster", "hostname"]
#     preconditions:
#       - test -f {{.KUBERNETES_DIR}}/{{.cluster}}/talosconfig
#       - test -f {{.KUBERNETES_DIR}}/{{.cluster}}/bootstrap/talos/assets/{{.hostname}}.secret.sops.yaml
#       - talosctl --context {{.cluster}} --nodes {{.hostname}} get machineconfig >/dev/null 2>&1

#   upgrade:
#     desc: Upgrade Talos on a node
#     cmds:
#       - until kubectl --context {{.cluster}} wait --timeout=5m --for=condition=Complete jobs --all --all-namespaces; do sleep 10; done
#       - talosctl --context {{.cluster}} --nodes {{.hostname}} upgrade --image="factory.talos.dev/installer/{{.TALOS_SCHEMATIC_ID}}:{{.TALOS_VERSION}}" --wait=true --timeout=10m --preserve=true
#       - talosctl --context {{.cluster}} --nodes {{.hostname}} health --wait-timeout=10m --server=false
#       - until kubectl --context {{.cluster}} wait --timeout=5m --for=jsonpath=.status.ceph.health=HEALTH_OK cephcluster --all --all-namespaces; do sleep 10; done
#     vars: *vars
#     requires:
#       vars: ["cluster", "hostname"]
#     preconditions:
#       - test -f {{.KUBERNETES_DIR}}/{{.cluster}}/talosconfig
#       - talosctl --context {{.cluster}} config info >/dev/null 2>&1
#       - talosctl --context {{.cluster}} --nodes {{.hostname}} get machineconfig >/dev/null 2>&1

#   upgrade-k8s:
#     desc: Upgrade Kubernetes
#     cmds:
#       - until kubectl --context {{.cluster}} wait --timeout=5m --for=condition=Complete jobs --all --all-namespaces; do sleep 10; done
#       - talosctl --context {{.cluster}} --nodes {{.CONTROLLER}} upgrade-k8s --to {{.KUBERNETES_VERSION}}
#     vars: *vars
#     requires:
#       vars: ["cluster"]
#     preconditions:
#       - test -f {{.KUBERNETES_DIR}}/{{.cluster}}/talosconfig
#       - talosctl --context {{.cluster}} config info >/dev/null 2>&1
#       - talosctl --context {{.cluster}} --nodes {{.CONTROLLER}} get machineconfig >/dev/null 2>&1

#   reset-node:
#     desc: Reset a Talos node and shut it down
#     prompt: Reset Talos '{{.hostname}}' node on the '{{.cluster}}' cluster ... continue?
#     cmd: talosctl --context {{.cluster}} reset --nodes {{.hostname}} --graceful=false
#     requires:
#       vars: ["cluster", "hostname"]
#     preconditions:
#       - test -f {{.KUBERNETES_DIR}}/{{.cluster}}/talosconfig
#       - talosctl --context {{.cluster}} config info >/dev/null 2>&1
#       - talosctl --context {{.cluster}} --nodes {{.hostname}} get machineconfig >/dev/null 2>&1

#   reset-cluster:
#     desc: Reset all the Talos nodes and shut 'em down
#     prompt: Reset Talos on the '{{.cluster}}' cluster ... continue?
#     cmd: talosctl --context {{.cluster}} reset --nodes {{.nodes}} --graceful=false
#     vars:
#       nodes:
#         sh: talosctl --context {{.cluster}} config info --output json | jq --join-output '[.nodes[]] | join(",")'
#     requires:
#       vars: ["cluster"]
#     preconditions:
#       - test -f {{.KUBERNETES_DIR}}/{{.cluster}}/talosconfig
#       - talosctl --context {{.cluster}} config info >/dev/null 2>&1
#       - talosctl --context {{.cluster}} --nodes {{.nodes}} get machineconfig >/dev/null 2>&1

#   bootstrap-matchbox:
#     desc: Bootstrap required Matchbox configuration to PXE Boot machine
#     cmds:
#       - for: ["kernel-amd64", "initramfs-amd64.xz"]
#         cmd: |
#           curl -skL https://factory.talos.dev/image/{{.TALOS_SCHEMATIC_ID}}/{{.TALOS_VERSION}}/{{.ITEM}} | \
#               curl -skT - -u "{{.HOME_SERVICE_USER}}:" \
#                   sftp://{{.HOME_SERVICE_ADDR}}/{{.HOME_SERVICE_MATCHBOX_DIR}}/assets/{{.ITEM}}
#       - find {{.KUBERNETES_DIR}}/{{.cluster}}/bootstrap/talos/assets -type f | xargs -I{} sh -c "sops --decrypt {} | $GOPATH/bin/envsubst | curl -skT - -u "{{.HOME_SERVICE_USER}}:" sftp://{{.HOME_SERVICE_ADDR}}/{{.HOME_SERVICE_MATCHBOX_DIR}}/assets/\$(basename {} | sed 's/\.secret\.sops//')"
#       - find {{.KUBERNETES_DIR}}/{{.cluster}}/bootstrap/talos/groups -type f | xargs -I{} curl -skT {} -u "{{.HOME_SERVICE_USER}}:" sftp://{{.HOME_SERVICE_ADDR}}/{{.HOME_SERVICE_MATCHBOX_DIR}}/groups/
#       - find {{.KUBERNETES_DIR}}/{{.cluster}}/bootstrap/talos/profiles -type f | xargs -I{} curl -skT {} -u "{{.HOME_SERVICE_USER}}:" sftp://{{.HOME_SERVICE_ADDR}}/{{.HOME_SERVICE_MATCHBOX_DIR}}/profiles/
#       - ssh -l {{.HOME_SERVICE_USER}} {{.HOME_SERVICE_ADDR}} "cd /var/opt/home-service ; go-task restart-matchbox"
#     vars: *vars
#     requires:
#       vars: ["cluster"]
#     preconditions:
#       - test -f $GOPATH/bin/envsubst
#       - host {{.HOME_SERVICE_ADDR}}